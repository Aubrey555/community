#ServerProperties
server.port=8080
        #配置项目名称
server.servlet.context-path=/community

#ThymeleafProperties
spring.thymeleaf.cache=false

# DataSourceProperties:配置数据库连接池(即数据源配置)
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/community?characterEncoding=utf-8&useSSL=false&serverTimezone=Hongkong
spring.datasource.username=root
spring.datasource.password=Aubrey00
    #配置连接池类型(此性能比较好)
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
    #配置连接池最大连接数
spring.datasource.hikari.maximum-pool-size=15
    #最小保留数
spring.datasource.hikari.minimum-idle=5
    #空闲时间(超过此时间关闭)
spring.datasource.hikari.idle-timeout=30000

# MybatisProperties:配置mybatis
    #1.sql的映射文件位置配置(即mapper接口的xml映射文件位置,用于执行sql语句的xml文件),在类路径的mapper目录下的所有文件
mybatis.mapper-locations=classpath:mapper/*.xml
    #2.用于存放实体类(封装表中数据的类)所在包的包名(entity)：使用此配置后,在sql映射文件中设置返回值类型resultType时只指定类名即可,可以不写包名
mybatis.type-aliases-package=com.nowcoder.community.entity
    #3.启用自动生成主键功能
mybatis.configuration.useGeneratedKeys=true
    #4.开启驼峰命名规则
mybatis.configuration.mapUnderscoreToCamelCase=true

#logger:配置打印日志属性
    #表示设置此包的日志级别为debug
logging.level.com.nowcoder.community=debug
    #表示将日志信息保存到e盘下work文件下的...的community.log文件中.如果文件不存在则自动创建,并且日志文件通常以log结尾(此处使用配置文件完成)
#logging.file.name=e:/work/data/nowcoder/community.log

#Spring的thymeleaf模板配置功能
#spring.thymeleaf.prefix=classpath:/templates/
#spring.thymeleaf.suffix=.html

#发送邮件功能中需要的邮箱参数配置
        #邮箱协议号(新浪的邮箱)
spring.mail.host=smtp.sina.com
        #邮箱端口号(所有邮箱发送邮件端口号为465)
spring.mail.port=465
        #邮箱账号
spring.mail.username=quzhifeng1998@sina.com
        #邮箱开启SMTP服务时的授权码(不是登录密码)
spring.mail.password=350b6b28b9e6ca2e
        #表示启用安全协议
spring.mail.protocol=smtps
        #发送邮件时采用安全连接
spring.mail.properties.mail.smtp.ssl.enable=true

#配置该项目进行账户注册时,需要的服务器域名(注册账号发送的激活链接,即跳转到此域名中,开发阶段进行自定义,即为本机地址)   自定义配置
community.path.domain=http://localhost:8080
#配置该项目对于上传文件存放的地址
community.path.upload=e:/work/data/upload

#配置redis相关属性(此三条必须进行配置)
    #选择redis的一个库进行使用,此处选择11库(一共为0-15)
spring.redis.database=11
    #配置redis连接的ip地址(默认即为本机localhost=127.0.0.1)
spring.redis.host=localhost
    #配置redis的默认端口
spring.redis.port=6379

#配置kafka基本属性
    #配置kafka访问服务器及端口号
spring.kafka.bootstrap-servers=localhost:9092
    #配置消费者的分组gropu id(该值在kafka安装包的config/consumer.properties目录下有),默认为test-consumer-group(在配置文件中修改为community-consumer-group)
spring.kafka.consumer.group-id=community-consumer-group
    #配置是否自动提交消费者的偏移量offset(按照偏移量读取消息),是
spring.kafka.consumer.enable-auto-commit=true
    #配置消费者自动提交的频率(每3000ms提交一次)
spring.kafka.consumer.auto-commit-interval=3000

#配置分布式搜索引擎ElasticSearch属性
    #配置集群名字
spring.data.elasticsearch.cluster-name=nowcoder
    #配置ES服务器的ip地址和端口号,此时集群中只有一个节点,配置一个ip地址和端口号即可(9200使用UDP协议,9300使用TCP协议,此处使用9300)
spring.data.elasticsearch.cluster-nodes=127.0.0.1:9300
    #ES搜索引擎底层使用Netty;redis底层也使用Netty,在启动Netty时会存在冲突,需要进行变通(主要是ES搜索引擎的问题)
#在项目启动的主程序CommunityApplication中,进行变通

#配置Spring提供的普通线程池的基本信息(线程池的线程个数等):配置类为TaskExecutionProperties.普通线程池,执行的任务一般为浏览器触发,不可预判。
    #Spring线程池中的核心线程数量(默认初始线程数量)
spring.task.execution.pool.core-size=5
    #Spring线程池中最大线程数量(当初始给定线程使用频繁,则会自动进行扩容,扩容最大线程数量为15)
spring.task.execution.pool.max-size=15
    #当core-size核心线程(5个)都被使用时,新的任务则会被存储到queue-capacity队列中(一共可存储100个任务),当core-size核心线程空闲时,执行此队列中的任务
    #而当此队列任务已满(存储了100个待执行的任务),则当前线程数量扩展为最大线程数量15
spring.task.execution.pool.queue-capacity=100

#配置Spring提供定时任务的线程池的基本信息:配置类为TaskSchedulingProperties
    #配置定时任务线程池的线程数量:5个(服务器一启动,则此线程启动,需要的任务可以提前给出,比如清理缓存,统计信息等,因此只需配置一个线程池数量即可)
spring.task.scheduling.pool.size=5

#SpringQuartz定时任务组件的配置信息(spring也会进行自动配置,此处给出后底层进行替代,并且此处配置结束后,数据才会持久化到数据库中)
    #该定时任务存储到数据库的方式为jdbc
spring.quartz.job-store-type=jdbc
    #定时调度任务的名称
spring.quartz.scheduler-name=communityScheduler
    #调度器的id生成策略:自动生成
spring.quartz.properties.org.quartz.scheduler.instanced=AUTO
    #调度任务存储到数据库所使用的底层类
spring.quartz.properties.org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX
    #jdbc驱动
spring.quartz.properties.org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate
    #是否采用集群方式(分布式部署)
spring.quartz.properties.org.quartz.jobStore.isClustered=true
    #底层所采用的线程池
spring.quartz.properties.org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool
    #线程池中线程数量(5个)
spring.quartz.properties.org.quartz.threadPool.threadCount=5

# 配置wkhtmltopdf插件的两个基本信息(自定义配置)
    #图片转化命令所在地址(或者 E:\JavaProgram\wkhtmltopdf\bin\wkhtmltoimage)
wk.image.command=E:/JavaProgram/wkhtmltopdf/bin/wkhtmltoimage
    #生成图片存放地址(或者 E:\work\data\wk-images)
wk.image.storage=E:/work/data/wk-images

#配置七牛云服务器相关内容:为了方便使用(自定义配置)
    #配置AK密钥:该密钥识别对象空间创建者身份,即只有云服务器空间创建者才能上传文件(自定义属性,因此前缀任意写,文件中引用即可)
qiniu.key.access=ku1WylsYRhBwQG5OAp3s7DgOvIha1QY1cimV9Yum
    #配置SK密钥:该密钥用于对上传文件进行加密
qiniu.key.secret=2XXPQBBmPRfLP9FujAqB3fBIM6fEyEZns1Ufhc2B
    #配置存储用户头像文件的云服务器的对象空间名
qiniu.bucket.header.name=community-header7777
    #配置存储头像文件的对象空间的域名(访问地址,且只能使用http访问,不支持https)
qiniu.bucket.header.url=http://rlsmflzhi.hb-bkt.clouddn.com
    #配置存储用户分享的图片文件的云服务器的对象空间名
qiniu.bucket.share.name=community-share777
    #配置存储用户分享的图片文件的对象空间的域名(访问地址,且只能使用http访问,不支持https)
qiniu.bucket.share.url=http://rlsm5wnc7.hb-bkt.clouddn.com

# caffeine本地缓存相关参数配置(自定义配置)
    #本地缓存最多存放的帖子数据大小,比如最多存放15条热门帖子
caffeine.posts.max-size=15
    #本地缓存caffeine的过期时间,即180s
caffeine.posts.expire-seconds=180