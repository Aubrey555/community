<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nowcoder.community.dao.MessageMapper">

    <sql id="selectFields">    /*字段*/
        id, from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <sql id="insertFields">
        from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <!--1.查询当前用户的所有会话列表,针对每个会话只返回一条最新的私信.(即每个会话只有一个最新私信返回到界面上显示) List<Message> selectConversations(int userId, int offset, int limit)
            1.1 该子语句得到当前用户每个会话的最新的私信id; status != 2表示当前私信未被删除 from_id != 1表示当前私信不为系统用户
                    from_id = #{userId} or to_id = #{userId}  表示当前用户可能是收信人  也可能是发信人
            select max(id) from message where status != 2 and from_id != 1 and (from_id = #{userId} or to_id = #{userId})
                group by conversation_id(对会话进行分组,得到相同的会话)
            1.2 对外层查询做条件筛选,通过内层的id得到所有最新的私信message,并按照私信id进行倒叙, 以及传入分页数据
            -->
    <select id="selectConversations" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where id in (
            select max(id) from message
            where status != 2
            and from_id != 1
            and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id
        )
        order by id desc
        limit #{offset}, #{limit}
    </select>

    <!--2.查询当前用户的会话数量(等价于1返回的list集合的大小) int selectConversationCount(int userId);-->
    <select id="selectConversationCount" resultType="int">
        select count(m.maxid) from (
            select max(id) as maxid from message
            where status != 2
            and from_id != 1
            and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id
        ) as m
    </select>

    <!--3.查询某个会话所包含的私信列表(通过conversationId对应的会话,返回两个用户之间所有的私信集合) List<Message> selectLetters(String conversationId, int offset, int limit);-->
    <select id="selectLetters" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where status != 2
        and from_id != 1
        and conversation_id = #{conversationId}
        order by id desc
        limit #{offset}, #{limit}
    </select>

    <!--4.查询某个会话所包含的私信数量.(也就是所有相同conversationId的总数) int selectLetterCount(String conversationId);-->
    <select id="selectLetterCount" resultType="int">
        select count(id)
        from message
        where status != 2
        and from_id != 1
        and conversation_id = #{conversationId}
    </select>

    <!--5.查询未读私信的数量 int selectLetterUnreadCount(int userId, String conversationId);
            将conversationId作为动态条件进行拼接,传入则表示查询当前用户userId和某个指定用户conversationId的所有未读私信数量
            不传入conversationId则表示查询当前用户userId和其他所有用户的未读私信数量-->
    <select id="selectLetterUnreadCount" resultType="int">
        select count(id)
        from message
        where status = 0            -- 当前用户的未读私信
        and from_id != 1
        and to_id = #{userId}
        <if test="conversationId!=null">    -- 动态sql,不传入则表示当前用户的所有未读私信
            and conversation_id = #{conversationId}
        </if>
    </select>
    <!--6. 新增消息 int insertMessage(Message message); 设置主键为keyProperty=id-->
    <insert id="insertMessage" parameterType="Message" keyProperty="id">
        insert into message(<include refid="insertFields"></include>)
        values(#{fromId},#{toId},#{conversationId},#{content},#{status},#{createTime})
    </insert>
    <!--7. 修改消息的状态(根据多个私信的id进行修改,可以设置已读或者删除等) int updateStatus(List<Integer> ids, int status);-->
    <update id="updateStatus">
        update message set status = #{status}
        where id in -- 其中id在ids集合中的即为未读消息
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach> -- 通过foreach动态标签遍历传入的参数集合ids,item="id"表示集合中的变量,并且以()进行拼接
    </update>
    <!--8. 查询某个主题下最新的通知 Message selectLatestNotice(int userId, String topic);-->
    <select id="selectLatestNotice" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where id in (
            select max(id) from message     -- 最大id即为最新通知
            where status != 2   -- status=2表示私信被删除
            and from_id = 1     -- from_id=1表示为系统用户发送的通知
            and to_id = #{userId}
            and conversation_id = #{topic}  -- 即为对应主题
        )
    </select>
    <!-- 9. 查询某个主题所包含的通知数量(即此主题下通知的总数) int selectNoticeCount(int userId, String topic);-->
    <select id="selectNoticeCount" resultType="int">
        select count(id) from message
        where status != 2
        and from_id = 1
        and to_id = #{userId}
        and conversation_id = #{topic}
    </select>

    <!--10.查询未读的通知的数量(未读通知数量) int selectNoticeUnreadCount(int userId, String topic);-->
    <select id="selectNoticeUnreadCount" resultType="int">
        select count(id) from message
        where status = 0        -- 表示未读数据
        and from_id = 1
        and to_id = #{userId}
        <if test="topic!=null">        -- 如果topic==null,即没有传入,则查询的是当前用户所有未读主题的数量,动态sql查询
            and conversation_id = #{topic}
        </if>
    </select>

    <!--11.查询某个主题所包含的通知列表 List<Message> selectNotices(int userId, String topic, int offset, int limit);-->
    <select id="selectNotices" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where status != 2
        and from_id = 1
        and to_id = #{userId}
        and conversation_id = #{topic}
        order by create_time desc
        limit #{offset}, #{limit}
    </select>

</mapper>